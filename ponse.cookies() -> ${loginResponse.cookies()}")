[1mdiff --git a/money/src/test/kotlin/user/api/UserControllerTest.kt b/money/src/test/kotlin/user/api/UserControllerTest.kt[m
[1mindex 3a15a91..aa03e5a 100644[m
[1m--- a/money/src/test/kotlin/user/api/UserControllerTest.kt[m
[1m+++ b/money/src/test/kotlin/user/api/UserControllerTest.kt[m
[36m@@ -4,18 +4,26 @@[m [mimport com.andreformento.money.user.security.UserCredentials[m
 import com.andreformento.money.user.security.api.UserSignupCreation[m
 import org.assertj.core.api.Assertions.assertThat[m
 import org.junit.jupiter.api.Test[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired[m
[32m+[m[32mimport org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient[m
 import org.springframework.boot.test.context.SpringBootTest[m
[31m-import org.springframework.boot.web.server.LocalServerPort[m
 import org.springframework.http.HttpStatus[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity[m
[32m+[m[32mimport org.springframework.test.web.reactive.server.WebTestClient[m
[32m+[m[32mimport org.springframework.test.web.reactive.server.returnResult[m
[32m+[m[32mimport org.springframework.test.web.servlet.MockMvc[m
[32m+[m[32mimport org.springframework.test.web.servlet.post[m
 import org.springframework.util.LinkedMultiValueMap[m
[31m-import org.springframework.web.reactive.function.client.WebClient[m
[32m+[m[32mimport org.springframework.util.MultiValueMap[m
 import kotlin.random.Random[m
 [m
[31m-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)[m
[31m-internal class UserControllerTest {[m
 [m
[31m-    @LocalServerPort[m
[31m-    var serverPort: Int? = null[m
[32m+[m[32m@SpringBootTest[m
[32m+[m[32m@AutoConfigureWebTestClient[m
[32m+[m[32mclass UserControllerTest {[m
[32m+[m
[32m+[m[32m    @Autowired[m
[32m+[m[32m    private lateinit var webClient: WebTestClient[m
 [m
     @Test[m
     fun `can obtain own user details when logged in`() {[m
[36m@@ -23,44 +31,59 @@[m [minternal class UserControllerTest {[m
         // TODO this is very wrong!!![m
         val email = "new@example.com" + Random.nextInt()[m
 [m
[31m-        val webClient = WebClient[m
[31m-            .builder()[m
[31m-            .baseUrl("http://localhost:${serverPort}")[m
[31m-            .build()[m
[32m+[m[32m//        client[m
[32m+[m[32m//            .post("/user/auth/signup")[m
[32m+[m[32m//            .andExpect {[m
[32m+[m[32m//                status { isNoContent() }[m
[32m+[m[32m//            }[m
 [m
         // act[m
[31m-        val signupResponse = webClient[m
[32m+[m[32m        webClient[m
             .post()[m
             .uri("/user/auth/signup")[m
             .bodyValue(UserSignupCreation(name = "user test", email = email, password = "pw"))[m
             .exchange()[m
[31m-            .block() ?: throw RuntimeException("Should have gotten a signup response")[m
[31m-[m
[31m-        assertThat(signupResponse.statusCode()).isEqualTo(HttpStatus.NO_CONTENT)[m
[32m+[m[32m            .expectStatus().isNoContent[m
[32m+[m[32m//            .block() ?: throw RuntimeException("Should have gotten a signup response")[m
[32m+[m[32m//        assertThat(signupResponse.statusCode()).isEqualTo(HttpStatus.NO_CONTENT)[m
 [m
         val loginResponse = webClient[m
             .post()[m
             .uri("/user/auth/login")[m
             .bodyValue(UserCredentials(email, "pw"))[m
             .exchange()[m
[31m-            .block() ?: throw RuntimeException("Should have gotten a login response")[m
[31m-        val responseCookies = loginResponse.cookies()[m
[31m-            .map { it.key to it.value.map { cookie -> cookie.value } }[m
[31m-            .toMap()[m
[32m+[m[32m            .expectStatus().isOk[m
[32m+[m[32m            .returnResult<Any>()[m
[32m+[m
[32m+[m[32m        println("Set-Cookie -> " + loginResponse.responseCookies.get("Set-Cookie"))[m
[32m+[m[32m        val xAuth = loginResponse.responseHeaders.getFirst("Set-Cookie")!!.replaceFirst("X-Auth", "")[m
[32m+[m[32m        println("value -> " + xAuth)[m
 [m
[31m-        val response = webClient[m
[32m+[m[32m        println("loginResponse.cookies() -> ${loginResponse.cookies()}")[m
[32m+[m[32m        println("responseCookies -> $responseCookies")[m
[32m+[m[32m        println("LinkedMultiValueMap(responseCookies) -> ${LinkedMultiValueMap(responseCookies)}")[m
[32m+[m[32m//            .block() ?: throw RuntimeException("Should have gotten a login response")[m
[32m+[m
[32m+[m[32m//        val responseCookies = loginResponse.cookies()[m
[32m+[m[32m//            .map { it.key to it.value.map { cookie -> cookie.value } }[m
[32m+[m[32m//            .toMap()[m
[32m+[m
[32m+[m[32m//        responseCookies -> {X-Auth=[eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJuZXdAZXhhbXBsZS5jb203NjA5MTYxNjYiLCJpc3MiOiJpZGVudGl0eSIsImV4cCI6MTYzMDQzNzI4NiwiaWF0IjoxNjMwNDM2Mzg2fQ.iV7Bc1t76pYzu3cl3mu87JOvr2Cldxtpda-ELfWfRwiwHqy6ppahb0xQSs5q3TxHuidPbwBihgqCCDBohYL4mAU_VhEDc6boeT4_NNtYjLuwrFFXtj6rpRrKeRClpZJFp_DQn2Si9WSNZ1rOWJbSagsTxIhvHjUQKqx1-Dh6ja8yWVn5l4GMceS1qHLwAQK4v42BmsPL6gYIg68YtqRP9sfHZ2W-Ru6K-Hw0ZR8HFAgQLa88dnVTJKgXCAWA-ipY6qm6cHY-1398ipd4gyRVcw9qpZBnep4Kvaco2B6zpodP1ldXbcKIQrY6qA6jmb2QMg-p8pe9Fhvttq6RqQT8RA]}[m
[32m+[m[32m//        println("responseCookies -> $responseCookies")[m
[32m+[m[32m        webClient[m
             .get()[m
             .uri("/user")[m
[31m-            .cookies { it.addAll(LinkedMultiValueMap(responseCookies)) }[m
[32m+[m[32m            .cookies { it.add("X-Auth",xAuth) }[m
             .exchange()[m
[31m-            .block()[m
[32m+[m[32m            .expectStatus().isOk[m
[32m+[m[32m//            .expectBody(LoggedUserResponse::class.java).isEqualTo(LoggedUserResponse(name = "user test", email = email))[m
 [m
         // assert[m
[31m-        assertThat(response?.statusCode())[m
[31m-            .isEqualTo(HttpStatus.OK)[m
[31m-[m
[31m-        assertThat(response?.bodyToMono(LoggedUserResponse::class.java)?.block())[m
[31m-            .isEqualTo(LoggedUserResponse(name = "user test", email = email))[m
[32m+[m[32m//        assertThat(response?.statusCode())[m
[32m+[m[32m//            .isEqualTo(HttpStatus.OK)[m
[32m+[m[32m//[m
[32m+[m[32m//        assertThat(response?.bodyToMono(LoggedUserResponse::class.java)?.block())[m
[32m+[m[32m//            .isEqualTo(LoggedUserResponse(name = "user test", email = email))[m
     }[m
 [m
 }[m
